第十三章：用户评论
=====================================


允许用户交互是社交博客平台成功的关键。在本章,你将学到如何实现用户评论。

评论属于某篇博客文章,因此定义了一个从 posts 表到 comments 表的一对多关系。使用这个关系可以获取某篇特定博客文章的评论列表。

comments 表还和 users 表之间有一对多关系。通过这个关系可以获取用户发表的所有评 论,还能间接知道用户发表了多少篇评论。用户发表的评论数量可以显示在用户资料页 中。

app/models.py:Comment 模型

 .. literalinclude:: code/code13-1.py
    :language: python

Comment 模型的属性几乎和 Post 模型一样,不过多了一个 disabled 字段。这是个布尔值字 段,协管员通过这个字段查禁不当评论。和博客文章一样,评论也定义了一个事件,在修 改 body 字段内容时触发,自动把 Markdown 文本转换成 HTML。转换过程和第 11 章中的 博客文章一样,不过评论相对较短,而且对 Markdown 中允许使用的 HTML 标签要求更严 格,要删除与段落相关的标签,只留下格式化字符的标签。

为了完成对数据库的修改,User 和 Post 模型还要建立与 comments 表的一对多关系

app/models/user.py:users 和 posts 表与 comments 表之间的一对多关系::

    class User(db.Model):
        # ...
        comments = db.relationship('Comment', backref='author', lazy='dynamic')

    class Post(db.Model):
        # ...
        comments = db.relationship('Comment', backref='post', lazy='dynamic')

提交和显示评论
------------------------------------------------------------------

在这个程序中,评论要显示在单篇博客文章页面中。这个页面在第 11 章添加固定链接时 已经创建。在这个页面中还要有一个提交评论的表单。用来输入评论的表单如示例 13-3 所 示。这个表单很简单,只有一个文本字段和一个提交按钮。

app/main/forms.py:评论输入表单::

    class CommentForm(Form):
        body = StringField('', validators=[Required()])
        submit = SubmitField('Submit')

app/main/views.py:支持博客文章评论

 .. literalinclude:: code/code13-2.py
    :language: python

这个视图函数实例化了一个评论表单,并将其转入 post.html 模板,以便渲染。提交表单 后,插入新评论的逻辑和处理博客文章的过程差不多。和 Post 模型一样,评论的 author 字段也不能直接设为 current_user,因为这个变量是上下文代理对象。真正的 User 对象要 使用表达式 current_user._get_current_object() 获取。


评论按照时间戳顺序排列,新评论显示在列表的底部。提交评论后,请求结果是一个重定 向,转回之前的 URL,但是在 url_for() 函数的参数中把 page 设为 -1,这是个特殊的页 数,用来请求评论的最后一页,所以刚提交的评论才会出现在页面中。程序从查询字符串 中获取页数,发现值为 -1 时,会计算评论的总量和总页数,得出真正要显示的页数。

文章的评论列表通过 post.comments 一对多关系获取,按照时间戳顺序进行排列,再使 用与博客文章相同的技术分页显示。评论列表对象和分页对象都传入了模板,以便渲染。 FLASKY_COMMENTS_PER_PAGE 配置变量也被加入 config.py 中,用来控制每页显示的评论数量。

评论的渲染过程在新模板 _comments.html 中进行,类似于 _posts.html,但使用的 CSS 类不 同。_comments.html 模板要引入 post.html 中,放在文章正文下方,后面再显示分页导航。 你可以在 GitHub 上的仓库中查看在这个程序里对模板所做的改动。

为了完善功能,我们还要在首页和资料页中加上指向评论页面的链接,

app/templates/_posts.html:链接到博客文章的评论::

    <a href="{{ url_for('.post', id=post.id) }}#comments">
        <span class="label label-primary">
            {{ post.comments.count() }} Comments
        </span>
    </a>

注意链接文本中显示评论数量的方法。评论数量可以使用 SQLAlchemy 提供的 count() 过滤器轻易地从 posts 和 comments 表的一对多关系中获取。

指向评论页的链接结构也值得一说。这个链接的地址是在文章的固定链接后面加上一个 #comments 后缀。这个后缀称为 URL 片段,用于指定加载页面后滚动条所在的初始位置。 Web 浏览器会寻找 id 等于 URL 片段的元素并滚动页面,让这个元素显示在窗口顶部。这 个初始位置被设为 post.html 模板中评论区的标题,即 <h4 id="comments">Comments<h4>。

除此之外,分页导航所用的宏也要做些改动。评论的分页导航链接也要加上 #comments 片 段,因此在 post.html 模板中调用宏时,传入片段参数。

管理评论
------------------------------------------------------------------

我们在第 9 章定义了几个用户角色,它们分别具有不同的权限。其中一个权限是 Permission.MODERATE_COMMENTS,拥有此权限的用户可以管理其他用户的评论。

为了管理评论,我们要在导航条中添加一个链接,具有权限的用户才能看到。这个链接在
base.html 模板中使用条件语句添加

app/templates/base.html:在导航条中加入管理评论链接::

    ...
    {% if current_user.can(Permission.MODERATE_COMMENTS) %}
    <li><a href="{{ url_for('main.moderate') }}">Moderate Comments</a></li> 
    {% endif %}
    ...

管理页面在同一个列表中显示全部文章的评论,最近发布的评论会显示在前面。每篇评 论的下方都会显示一个按钮,用来切换 disabled 属性的值。

app/main/views.py:管理评论的路由::

    @main.route('/moderate')
    @login_required
    @permission_required(Permission.MODERATE_COMMENTS)
    def moderate():
        page = request.args.get('page', 1, type=int)
        pagination = Comment.query.order_by(
            Comment.timestamp.desc()).paginate(
                page, per_page=current_app.config['FLASKY_COMMENTS_PER_PAGE'],
                error_out=False)
        comments = pagination.items
        return render_template('moderate.html', comments=comments,
            pagination=pagination, page=page)

这个函数很简单,它从数据库中读取一页评论,将其传入模板进行渲染。除了评论列表之 外,还把分页对象和当前页数传入了模板。

moderate.html 模板也很简单,如示例 13-8 所示,因为它依靠之前创建的子模板 _comments. html 渲染评论。

app/templates/moderate.html:评论管理页面的模板

 .. literalinclude:: code/code13-3.html
    :language: html

这个模板将渲染评论的工作交给 _comments.html 模板完成,但把控制权交给从属模板之 前,会使用 Jinja2 提供的 set 指令定义一个模板变量 moderate,并将其值设为 True。这个 变量用在 _comments.html 模板中,决定是否渲染评论管理功能。

_comments.html 模板中显示评论正文的部分要做两方面修改。对于普通用户(没设定 moderate 变量),不显示标记为有问题的评论。对于协管员(moderate 设为 True),不管评 论是否被标记为有问题,都要显示,而且在正文下方还要显示一个用来切换状态的按钮。

app/templates/_comments.html:渲染评论的正文

 .. literalinclude:: code/code13-4.html
    :language: html

做了上述改动之后,用户将看到一个关于有问题评论的简短提示。协管员既能看到这个提 示,也能看到评论的正文。在每篇评论的下方,协管员还能看到一个按钮,用来切换评论 的状态。点击按钮后会触发两个新路由中的一个,但具体触发哪一个取决于协管员要把评 论设为什么状态。

app/main/views.py:评论管理路由

 .. literalinclude:: code/code13-5.py
    :language: python

上述启用路由和禁用路由先加载评论对象,把 disabled 字段设为正确的值,再把评论对象 写入数据库。最后,重定向到评论管理页面(如图 13-3 所示),如果查询字符串中指定了 page 参数,会将其传入重定向操作。_comments.html 模板中的按钮指定了 page 参数,重 定向后会返回之前的页面。


.. include:: ../../../ad.rst 