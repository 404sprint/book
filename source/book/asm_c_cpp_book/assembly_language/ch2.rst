第二章、寄存器
====================================================================

CPU中的主要部件是寄存器，寄存器是CPU中程序员可以用指令读写的部件，程序员通过改变各种寄存器中的内容来实现对CPU的控制。

不同的CPU，寄存器的个数、结构是不同的，8086CPU有14个寄存器，每个寄存器有一个名称。这些寄存器是：AX BX CX DC SI DI SP BP IP CS SS DS ES PSW，以下用到哪些寄存器在介绍。

2.1、通用寄存器
------------------------------------------------------------------

8086CPU的所有寄存器都是16位的，可以存放2个字节。 AX、BX、CX、DX这4个寄存器通常用来存放一般性数据，称为通用寄存器。

8086CPU的上一代寄存器是8位的，为了保证兼容，使原来基于上代CPU编写的程序可以运行，把这4个寄存器分为可独立使用的两个8位寄存器来使用：
 - AX分为AH、AL
 - BX分为BH、BL
 - CX分为CH、CL
 - DX分为DH、DL

高8位AH，低8位位AL

2.2、字在寄存器中的存储
------------------------------------------------------------------

处于对兼容性的考虑，8086CPU可以一次性处理一下两种尺寸的数据：
 - 字节：记为byte，一个字节由8个bit组成，可以存在8位寄存器中。
 - 字：记为word，一个字由两个字节组成，这两个字节分别称为这个字的高位字节和低位字节。

2.3、几条汇编指令
------------------------------------------------------------------

.. list-table:: 汇编指令举例
   :header-rows: 1

   * - 汇编指令
     - 控制CPU完成的操作
     - 用高级语言的语法描述
   * - mov ax,78
     - 将18送入寄存器AX中
     - AX=78
   * - mov ah,78 
     - 将78送入寄存器AH中
     - ah=78
   * - add ax,8
     - 将寄存器中的ax中的数值加上8
     - ax = ax+8
   * - mov ax,bx
     - 将寄存器bx中的数据传入寄存器ax
     - AX=BX
   * - add ax,bx
     - 将ax和bx中的数值相加，结果存在ax中
     - ax = ax+bx

2.4、物理地址
------------------------------------------------------------------

所有的内存单元构成的存储空间是一个一维的线性空间，每一个内存单元在这个空间中都有唯一的地址，我们将这个唯一的地址称为物理地址。

CPU通过地址总线送入存储器的，必须是一个内存单元的物理地址。在CPU向地址总线上发出物理地址之前，必须要在内部先形成这个物理地址。不同的CPU可以有不同的形成物理地址的方式。

2.5、16位结构CPU
------------------------------------------------------------------

概括的讲，16位结构描述了一个CPU具有下面几个方面的结构特性：
 - 运算器一次最多可以处理16位的数据
 - 寄存器的最大宽度为16位
 - 寄存器和运算器之间的通路位16位

 8086是16位结构的CPU，这就是说，在8086内部，能够一次性处理、传输、暂时存储的信息最大长度是16位。

2.6、8086CPU给出的物理地址方法
------------------------------------------------------------------

8086CPU有20位的地址总线，可以传送20位地址，达到1mb寻址能力，8086CPU又是16位结构，在内部一次性处理、传输、暂时存储的地址为16位。

8086CPU采用了一种在内部使用两个16位地址合成的方法来形成一个20位的物理地址。一个称为段地址，一个称为偏移地址。

所以 物理地址=段地址*16+偏移地址

2.7、段地址*16+偏移地址=物理地址的本质含义
------------------------------------------------------------------

因为是16位的数据所以*16就是左移动一位+偏移地址就是一个20位的物理地址了

2.8、段的概念
------------------------------------------------------------------

内存中并没有分段，段的划分来自CPU。由于8086CPU用段地址+偏移地址=物理地址 的方式给出内存单元的物理地址，使得我们可以用分段的方式来管理内存。

将若干地址连续的内存单元看做一个段，用段地址*16定位段的起始地址 用偏移地址定位段中的内存单元。有两段需要注意：段地址*16必然是16的倍数，所以一个段地址的起始地址也一定是16的倍数。偏移地址位16位，16位的寻址能力为64kb 所以一个段的长度最大为64kb。


2.9、段寄存器
------------------------------------------------------------------

8086CPU在访问内存时要由相关部件提供内存单元的段地址和偏移地址合成物理地址。段地址在8086的段寄存器中存放，8086CPU由4个段寄存器： CS DS SS DS 。本章介绍CS。

2.10、CS和IP
------------------------------------------------------------------

CS和IP是8086CPU中最关键的寄存器。它们指示了CPU当前要读取指令的地址，
**CS为代码段寄存器，IP为指令指针寄存器。**

任意时刻，CPU将CS:IP指向的内容当做指令执行。

2.11、修改CS、IP的指令
------------------------------------------------------------------

在CPU中，程序员能够用指令读写的部件只有寄存器，程序员可以通过改变寄存器中的内容实现对CPU的控制。CPU从何处执行指令有CS、IP中的内容决定的，程序员可以改变CS、IP中的内容来控制CPU执行的目标指令。

若想同时修改CS、IP的内容，可以用jmp 段地址:偏移地址 的指令完成，如::

    jmp 2AE3:3 执行后 CS=2AE3H，IP=0003H CPU将从2AE33H处读取指令。

2.12、代码段
------------------------------------------------------------------

略







